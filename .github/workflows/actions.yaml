name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies (with caching)
        run: npm ci
        env:
          CI: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' # Run only on the main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with EAS
        env:
          EAS_ACCESS_TOKEN: ${{ secrets.EAS_ACCESS_TOKEN }}
        run: eas login --token $EAS_ACCESS_TOKEN

      - name: Build Android
        run: eas build --platform android --non-interactive

      - name: Build iOS
        run: eas build --platform ios --non-interactive

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-build-${{ github.ref_name }}
          path: |
            dist/*.apk
            dist/*.ipa

  deploy:
    name: Deploy App
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Expo
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: npx expo-cli publish --non-interactive

      - name: Notify Slack
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"âœ… CI/CD pipeline completed successfully on branch: '${{ github.ref_name }}'!"}' \
            "$SLACK_WEBHOOK_URL"
