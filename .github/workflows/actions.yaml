# GitHub Actions Workflow for CI/CD Pipeline

# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Lint code
        run: npm run lint

      # - name: Run tests
      #  run: npm test

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build the app
        run: |
          npx expo prebuild
          npx expo build:android --non-interactive --no-wait --output-dir=build/android
          npx expo build:ios --non-interactive --no-wait --output-dir=build/ios

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: |
            build/android/*.apk
            build/ios/*.ipa

# Documentation for Managing and Extending the CI/CD Pipeline

## Overview
This workflow automates the CI/CD process for the project. It performs the following steps:
1. **Linting and Testing**: Ensures code quality and passes all tests.
2. **Building the App**: Prebuilds the Expo app and generates build artifacts for Android and iOS.
3. **Deploying the App**: Publishes the app to Expo and sends notifications upon success.

## Key Components
1. **Triggers**:
  - Runs on `push` events to `main` branches.
  - Runs on `pull_request` events targeting the `main` branch.

## How to Extend

1. **Add Notifications**:
   - Add more notification steps in the `deploy` job for platforms like Teams, Discord, or email.
   - Example for Discord:
     ```yaml
     - name: Notify Discord
       run: |
         curl -X POST -H 'Content-Type: application/json' \
           -d '{"content": "âœ… Build and deployment successful!"}' ${{ secrets.DISCORD_WEBHOOK_URL }}
     ```

2. **Add Deployment Steps for App Stores**:
   - Use third-party actions to deploy to the Google Play Store or Apple App Store.
   - Example for Google Play Store:
     ```yaml
     - name: Deploy to Google Play
       uses: r0adkll/upload-google-play@v1
       with:
         serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
         packageName: com.example.app
         releaseFiles: build/android/app-release.aab
     ```

## How to Manage the Workflow
1. **Update Dependencies**:
   - Regularly update Node.js, npm, and Expo CLI versions in the workflow.

2. **Monitor and Debug Failures**:
   - Use the GitHub Actions logs to troubleshoot failures in any step.

3. **Secure Secrets**:
   - Manage secrets in GitHub under **Settings > Secrets and variables**.
   - Rotate credentials periodically to enhance security.

4. **Add New Branches**:
   - Update the `on.push.branches` section to include additional branches.
   - Example:
     ```yaml
     on:
       push:
         branches:
           - main
           - staging
     ```

## Conclusion
This CI/CD pipeline is flexible and can be easily extended to meet additional requirements. By following the provided guidelines, you can enhance its functionality and adapt it to various project needs.
